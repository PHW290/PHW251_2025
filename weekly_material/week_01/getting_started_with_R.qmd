---
title: "Getting started with R"
format: 
  html:
    smooth-scroll: true
    toc: true
    toc-location: left
    anchor-sections: true
    embed-resources: true
    link-external-icon: true
    link-external-newwindow: true
editor: visual
---

## What you should already know (from Week 0):

-   How to access the RStudio environment through Datahub

## What is included in this lecture:

-   Key common skills
    -   Assigning values
    -   Naming objects
    -   Running Code
    -   Commenting Code
-   Data types
-   Data Structures/Objects
    -   Vectors
    -   Matrices
    -   Lists
    -   Dataframes (briefly)
    -   Creating objects using functions
-   Calculations and Comparisons

## Key Common Skills

### Assigning a value to an object

To assign an object a value (or values), use “\<-”: Object \<- value(s)

```{r}
#use "<-" as the operator to assign the value of 5 to the object named "x"
x <- 5
#return the value of x
x

#assign and return 
(x <- 5)

```

### Naming objects

-   Names cannot start with numbers or symbols
-   R is case sensitive!!
-   Best practices:
    -   Use lower case
    -   Use underscores to separate words in names

```{r}
# R treats each of these objects as different objects even though they use the same letters. This is different than SAS and some other languages, which would consider an object named in any of these three ways to be the same object. That is why getting used to using a standard way of naming objects will help you in the long run, because you won't have to try to track down how you named something each time you refer to it later in the code.

# thisValUE 
# thisvalue  
# THISVALUE

# some users prefer what is called 'camelCase' which starts with a lower-case letter and then uses a capital letter to indicate every subsequent new word

camelCaseHere <- "camel"
# Many packages in R use camel case for functions
# camelCase

#we recommend using all lowercase and underscores to separate words for object naming
snake_case_1 <- "snake"

# kebab-case-example kebab case used to be possible in R, but it seems a recent update has rendered it obsolete

# kebab-case-1 <- "kebab" - this no longer works

```

### Running Code

![](images/run%20code.png)

-   To run one line:
    -   Click within line or highlight line
    -   Click “Run” (shortcut: ctrl + enter)
-   To run several lines:
    -   Highlight lines
    -   Click “Run” (shortcut: ctrl + enter)

```{r}

assign_this <- "this"

assign_that <- "that"
paste0(assign_this, " and ", assign_that)

```

-   To run directly in console:
    -   Enter code directly into the console
    -   Press Enter
    -   \*\*Good option when there is no need to save code

### Commenting Code

Use “#” to comment out code

Shortcut: Ctrl + Shift + C ( Command + Shift + C on macOS) 

\*\*Comment multiple lines at a time by highlighting and using keyboard shortcut

```{r}

# This is very simple commenting on a very simple example (refer to the lecture to see what is going on here)

assign_this <- "this"

assign_that <- "that"
paste0(assign_this, " and ", assign_that)

assign_other <- ", or the other"
put_all_together <- paste0(assign_this, ", ", assign_that, assign_other)
put_all_together
```

**Commenting best practices:**

-   Add comments to describe purpose of code or explain specific or complicated processes

-   Err on the side of over-commenting

-   While developing code, comment out (rather than delete) sections that you may need to revisit

## Five Main Data types in R

| Type      | Examples                                             |
|-----------|------------------------------------------------------|
| character | "ph", "ucb", “ucb ph”                                |
| numeric   | 290, 290.5                                           |
| integer   | 290L (the L tells R to store this as an integer)     |
| logical   | TRUE (or T), FALSE (or F)                            |
| complex   | 1+4i (complex numbers with real and imaginary parts) |

: **Character values**

-   Indicated by quotation marks ("" or ''); best practice is to use double quotes
-   Can contain spaces, characters, symbols, and numbers

```{r}
#create a character value using double quotes
ch_double <- "dog"
#try using single quotes - this works, too
ch_single <- 'dog'

ch_double2 <- "turtle"

#the code below will not work, as R is looking for an object named "dog" 
#(since there are no quotations around it)

# ch_no <- dog

#if we create an objected named "dog"
dog <- "puppy"

#then re-run the line with no quotes, the value of "ch_no" will take on the
#value of the object "dog" which makes ch_no = "puppy"
ch_no <- dog
ch_no

#character values can be as long as you want
ch_long <- "this is a really really long string that i want to save"
ch_long

```

**Numbers** can be stored in three ways.

1.  Numeric - both whole numbers or decimals
2.  Integer - similar to whole number by indicated with an “L”
3.  Complex

```{r}
#numeric objects can be whole or decimal
num_whole <- 290
num_dec <- 290.9

#integers are indicated by adding an "L"
int <- 290.5L

#complex
complex <- 2+4i

```

**Logical:** Use all caps - TRUE or T, FALSE or F

```{r}
#two options for assigning a logical value to an object
logical <- TRUE
logical_1 <- T

logical_2 <- TRUE
#this does not save as a true logical value, rather it saves the string 
#"true" as a character
logical_lower <- "TRUE"

```

Extra details - 

-   Dates stored as numbers (the number of days (for dates) or seconds (for date/times) from January 1, 1970

-   There are several “constants” available in Base R (i.e. today’s date)

-   Missing values are stored as **NA**

## Data Structures in R

The primary data structure in R is made up of objects.

![](images/r_data_structures.png)

We'll go into detail on these below except for

Factors - These are a little complicated, but the idea is there are fixed categories, that will display in a fixed order; this is especially useful for forcing output to display in a fixed manner, or modeling. These will be covered in detail later in the course.

**Vectors**

(Atomic) Vectors - this is a one dimensional object that can only contain a single data type (character, numeric, logical). Even a single value is stored as a vector in R (basically a vector of length 1)

-   Multiple ways to be created:
    -   c() function
    -   Using : operator for a vector of consecutive numbers

```{r}
#create a numeric vector using the c() function
vec_num <- c(1,5,6,94)
vec_num

#create a numeric vector using the : operator
vec_num2 <- 1:10
vec_num2
#create a character vector using the c() function
vec_char <- c("dog","cat","mouse")

#important note - a single value in R is stored as a vector of length 1

vec_one <- 100
class(vec_one)

#try creating a vector with multiple data types - this will force 290 to be
#stored as "290"
vec_multi <- c(290,"ph")
str(vec_multi)

```

**Matrices**

-   Multi-dimensional, single data type
-   Created using matrix() function

```{r}
#create a matrix using the : operator to define the data included
matrix_1 <- matrix(data = 1:12, nrow = 3, ncol = 4, byrow = TRUE, dimnames = NULL)
matrix_1

```

**Lists**

-   One-dimensional, multiple data types and/or objects
-   Created using list() function

```{r}
#use the list function to see what happens if you add items of different types
my_list <- list(290, "290", "ph")
my_list
str(my_list)
```

More on data frames in an upcoming week!

### Using functions to describe objects

A few examples:

-   length() - how long is the object?
-   class() - what type of object is it?
-   typeof() - what data type is the object?

```{r}
#return information about matrix and vectors created above
length(matrix_1) 
class(matrix_1)
typeof(matrix_1)

length(vec_num2)
typeof(vec_num2)

length(vec_char)
typeof(vec_char)

```

## Calculations and comparisons

### Calculations

R can be used as a high-power calculator in the console and in the script.

Calculations can be made on numbers and objects.

![](images/calculations.png)

```{r}
#calculations can be performed on numbers
54*38743252349

#and objects
a <- 4
b <- 75

b/a

#calculations can be performed on vectors
vec_num2*10

```

New objects can be created as result of calculations.

```{r}
matrix_2 <- matrix_1 * 5
matrix_2

c <- b-a
c
```

**Using functions for calculations**

In addition to the operators above, there are many functions that can be used to do calculations.

```{r}
#example: absolute value
abs(-90)

```

### Comparisons

Two values or objects can be compared to assess if equal (==), unequal (!=), less (\< or \<=), or greater (\> or \>=) and **will return a true or false**.

![](images/comparisons.png)

```{r}
5==40

"dog"=="cat"

a!=b

b>c

d <- (a+b)/c
d

d2 <- (a+b)>c
d2

```
